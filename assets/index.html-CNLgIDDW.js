import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,d as t,b as n}from"./app-BTQyp2eF.js";const o={},p=n('<h2 id="同源策略的概念和具体限制" tabindex="-1"><a class="header-anchor" href="#同源策略的概念和具体限制"><span>同源策略的概念和具体限制</span></a></h2><p>同源策略：限制 <strong>从一个源加载的文档或脚本</strong> 如何与 <strong>来自另一个源的资源</strong> 进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。（来自MDN官方的解释）</p><p>具体解释：</p><ul><li><code>源</code>包括三个部分：协议、域名、端口。如果有任何一个部分不同，则<code>源</code>不同，那就是跨域了。</li><li><code>限制</code>：这个源的文档没有权利去操作另一个源的文档。这个限制体现在： <ul><li><code>Cookie</code>、<code>LocalStorage</code>和<code>IndexDB</code>无法获取。</li><li>无法获取和操作<code>DOM</code>。</li><li>不能发送<code>Ajax</code>请求。我们要注意，<code>Ajax</code>只适合<code>同源</code>的通信。</li></ul></li></ul>',4),c=n(`<h2 id="前后端如何通信" tabindex="-1"><a class="header-anchor" href="#前后端如何通信"><span>前后端如何通信</span></a></h2><p>主要有以下几种方式：</p><ul><li><code>Ajax</code>：不支持跨域。</li><li><code>WebSocket</code>：不受同源策略的限制，支持跨域</li><li><code>CORS</code>：不受同源策略的限制，支持跨域。一种新的通信协议标准。可以理解成是：<code>同时支持同源和跨域的Ajax</code>。</li></ul><h3 id="如何创建ajax" tabindex="-1"><a class="header-anchor" href="#如何创建ajax"><span>如何创建Ajax</span></a></h3><ol><li>创建 <code>XMLHttpRequest</code> 对象。</li><li>使用<code>open</code>方法设置请求的参数。<code>open(method, url, 是否异步)</code></li><li>发送请求。</li><li>注册事件。 注册 <code>onreadystatechange</code> 事件，状态改变时就会调用。</li><li>获取返回的数据，更新UI。</li></ol><h3 id="发送-get-请求" tabindex="-1"><a class="header-anchor" href="#发送-get-请求"><span>发送 get 请求</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// （1）创建异步对象</span>
<span class="token keyword">let</span> ajaxObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// （2）设置请求的参数。包括：请求的方法、请求的url。</span>
ajaxObj<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// （3）发送请求</span>
ajaxObj<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//（4）注册事件。 onreadystatechange事件，状态改变时就会调用。</span>
<span class="token comment">//如果要在数据完整请求回来的时候才调用，我们需要手动写一些判断的逻辑。</span>
ajaxObj<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 为了保证 数据 完整返回，我们一般会判断 两个值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ajaxObj<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> ajaxObj<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果能够进到这个判断 说明 数据 完美的回来了,并且请求的页面是存在的</span>
    <span class="token comment">// 5.在注册的事件中 获取 返回的 内容 并修改页面的显示</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据返回成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 数据是保存在 异步对象的 属性中</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajaxObj<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 修改页面的显示</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> ajaxObj<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送-post-请求" tabindex="-1"><a class="header-anchor" href="#发送-post-请求"><span>发送 post 请求</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 异步对象</span>
<span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置属性</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果想要使用post提交数据,必须添加此行</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将数据通过send方法传递</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;name=fox&amp;age=18&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 发送并接受返回值</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这步为判断服务器是否正确响应</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onreadystatechange" tabindex="-1"><a class="header-anchor" href="#onreadystatechange"><span>onreadystatechange</span></a></h3><p>注册 <code>onreadystatechange</code> 事件后，每当 <code>readyState</code> 属性改变时，就会调用 <code>onreadystatechange</code> 函数。</p><p><code>readyState</code>：（存有 <code>XMLHttpRequest</code> 的状态。从 0 到 4 发生变化）</p><ul><li><code>0</code>: 请求未初始化</li><li><code>1</code>: 服务器连接已建立</li><li><code>2</code>: 请求已接收</li><li><code>3</code>: 请求处理中</li><li><code>4</code>: 请求已完成，且响应已就绪</li></ul><h3 id="事件的触发条件" tabindex="-1"><a class="header-anchor" href="#事件的触发条件"><span>事件的触发条件</span></a></h3><table><thead><tr><th>事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onreadystatechange</td><td>每当 <code>xhr.readystate</code> 改变时触发；但 <code>xhr.readystate</code> 由 非 <code>θ</code> 值变为 <code>0</code> 时不触发</td></tr><tr><td>onloadstart</td><td>调用 <code>xhr.send()</code> 方法后立即触发，若 <code>xhr.send()</code> 未被调用则不会触发此事件。</td></tr><tr><td>onprogress</td><td><code>xhr.upload.onprogress</code> 在上传阶段(即 <code>xhr.send()</code>之后，<code>xhr.readystate=2</code> 之前)触发，每50ms触发一次；<code>xhr.onprogress</code> 在下载阶段(即 <code>xhr.readystate=3</code> 时)触发，每50ms触发一次。</td></tr><tr><td>onload</td><td>当请求成功完成时触发，此时 <code>xhr.readystate=4</code></td></tr><tr><td>onloadend</td><td>当请求结束(包括请求成功和请求失败)时触发</td></tr><tr><td>onabort</td><td>当调用 <code>xhr.abort()</code> 后触发</td></tr><tr><td>ontimeout</td><td><code>xhr.timeout</code> 不等于0，由请求开始即 <code>onloadstart</code> 开始算起，当到达 <code>xhr.timeout</code> 所设置时间请求还未结束即 <code>onloadend</code>，则触发此事件。</td></tr><tr><td>onerror</td><td>在请求过程中，若发生 <code>Network error</code> 则会触发此事件(若发生 <code>Network error</code> 时，上传还没有结束，则会先触发 <code>xhr.upload.onerror</code>，再触发 <code>xhr.onerror</code>；若发生 Network error 时，上传已经结束，则只会触发 <code>xhr.onerror</code> )。注意，只有发生了 <strong>网络层级别</strong> 的异常才会触发此事件，对于应用层级别的异常，如响应返回的 <code>xhr.statuscode</code> 是 <code>4xx</code> 时，并不属于 <code>Network error</code>，所以不会触发 <code>onerror</code> 事件，而是会触发 <code>onload</code> 事件。</td></tr></tbody></table><h2 id="如何解决跨域" tabindex="-1"><a class="header-anchor" href="#如何解决跨域"><span>如何解决跨域</span></a></h2><h3 id="被调用方-即服务端-解决" tabindex="-1"><a class="header-anchor" href="#被调用方-即服务端-解决"><span><strong>被调用方（即服务端）解决</strong></span></a></h3><p><strong>调用方</strong> 将请求发送至 <strong>被调用方</strong>，被调用方处理完成后，在请求响应中添加基于 <strong>http协议</strong> 关于跨域请求的一些规定，就是在 http响应头 中添加 <strong>Access-Control-Allow-Origin</strong> 等一些配置允许跨域访问。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 允许跨域的域名，设置*表示允许除带Cookies信息的所有域名</span>
response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用方-即客户端-解决" tabindex="-1"><a class="header-anchor" href="#调用方-即客户端-解决"><span><strong>调用方（即客户端）解决</strong></span></a></h3><p><strong>调用方</strong> 的 请求url 经过调用方的 <strong>Nginx</strong> 做反向代理转换，修改 <strong>调用方</strong> 的HTTP服务器，目的就是为了和 <strong>被调用方</strong> 的域名端口一致，在浏览器中也就只能看到调用方的url。</p><h3 id="补充后端解决跨域问题" tabindex="-1"><a class="header-anchor" href="#补充后端解决跨域问题"><span>补充后端解决跨域问题</span></a></h3><p>如果是在被调用方解决跨域问题，被调用方解决支持跨域办法如下：</p><ol><li>在应用服务器端实现</li><li>在Ngnix上配置</li><li>在Apache上配置</li><li>Spring框架解决</li></ol><p>虽然有4种方案，但是这4种方案的本质都是一样的，最终的目的是在响应头增加字段。浏览器在执行跨域请求时，如果遇到是简单请求，则先执行后判断；如果是非简单请求，则先使用OPTION向服务器发起一个预检请求 <strong>preflight request</strong> ，从而获知服务器是否允许该跨域访问，如果允许，就在此发起带真实数据的请求，否则不发起。这就实现了对被调用方的数据安全保护，也是跨域问题设计所在的目的之一。</p><blockquote><p>在介绍简单/非简单请求前，我们要了解什么是 Content-Type，<strong>Content-Type是指http/https发送信息至服务器时的内容编码类型</strong></p></blockquote><ul><li><strong>举个例子</strong></li></ul><p>我们在本地搭起来了一个后端项目，端口号为8080；同时搭建了一个前端项目，端口号为9527。那这个时候我们直接调用后端接口的时候，前后端分离的原因导致我们需要跨域请求 。因此，在应用服务器端的响应头需要添加允许跨域的设置，即如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>
  <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

  <span class="token class-name">HttpServletResponse</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>

  <span class="token comment">// 允许跨域的域名，设置*表示允许除带Cookies信息的所有域名</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:9527&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">// 允许跨域的方法，可设置*表示所有。GET/POST/OPTIONS等</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">// 假如给post请求头设置了contentType字段，则需要添加以下信息</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置预检命令的缓存时效。单位是&quot;秒&quot;</span>
  <span class="token comment">// 如果没有失效，则不会再次发起OPTION预检请求</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Max-Age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3600&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 还可以有其他配置...</span>
  chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让过滤器放行该请求</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候，我们就可以在响应头Response Headers里观察到 <strong>Access-Control-Allow-Origin</strong> 和 <strong>Access-Control-Allow-Methods</strong> 信息，这代表跨域就被成功允许了。</p><ul><li><strong>还有一种特殊情况</strong></li></ul><p>带有Cookie的请求还需要注意一下两点才能实现跨域：</p><ol><li>Access-Control-Allow-Origin的值不能为 <strong>&#39;*&#39;</strong> 而是必须是精准匹配，因此需要添上具体的域名</li><li>打开允许Cookie的设置，即Access-Control-Allow-Credentials: true</li></ol><p>但是这又带出了另一个问题，就是只能支持一个域名的跨域，怎么办？其实该变量可以通过调用方的请求头信息获取，解决办法如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequset</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
<span class="token class-name">String</span> origin <span class="token operator">=</span>  req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token char">&#39;Origin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 带cookie的时候origin必须是全匹配，不能使用 *</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Orign&quot;</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于需要增加请求头信息解决方案与此类似</p><p><strong>调用方解决跨域：反向代理</strong></p><p>当被调用方无法帮助解决处理跨域问题时，调用方也可以自己解决处理。其实现的办法就是利用反向代理</p><blockquote><p><strong>正向代理：</strong> 利用代理客户端去请求服务器，从而隐藏了真实的客户端，服务器并不知道客户端是谁，这种代理方式称作正向代理，其代理的对象是客户端</p><p><strong>反向代理:</strong> 反向代理隐藏了真正的服务端。举个例子，我们只知道敲下www.baidu.com时就能访问百度搜索页面，然而背后成千上万的服务器到底是哪一台正在为我们服务我们并不知道，这种隐藏了服务器端的代理方式称作反向代理，其代理的是服务器端。软件层面上常用Ngnix来做反向代理服务器，他的性能很好，用来做负载均衡。</p></blockquote><p>为了实现反向代理，我们需要在 Ngnix中配置一个代理域名，或者称为一个网址demo.com，就像百度成千上万的服务器使用用一个代理网址www.baidu.com一样。ngnix的配置信息如下</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">server_name:</span> demo.com</span><span class="token punctuation">;</span> <span class="token comment"># 请求域名是demo.com，端口是80的，都会被nginx做代理</span>
  <span class="token comment"># http://demo.com/api/test 就会跳转到http://localhost:8080/test/</span>
  <span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080/test/</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment"># http://demo.com/test 就会跳转到http://localhost:8080/</span>
  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>跨域是由浏览器安全限制造成的，解决跨域的办法有三种，一是 <strong>Jsonp</strong> 绕过浏览器安全检测策略，二是从被调用方配置支持跨域的请求头信息，三是从调用方利用反向代理，在 Ngnix 或 Apache 中配置代理域名隐藏跨域。</p>`,43);function l(i,d){return a(),e("div",null,[p,t(" more "),c])}const k=s(o,[["render",l],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/Network/CrossDomain/","title":"跨域","lang":"zh-CN","frontmatter":{"title":"跨域","lang":"zh-CN","date":"2022-06-01T15:28:16.000Z","permalink":"/Network/CrossDomain/","category":["Network"],"tag":["Network"],"description":"同源策略的概念和具体限制 同源策略：限制 从一个源加载的文档或脚本 如何与 来自另一个源的资源 进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。（来自MDN官方的解释） 具体解释： 源包括三个部分：协议、域名、端口。如果有任何一个部分不同，则源不同，那就是跨域了。 限制：这个源的文档没有权利去操作另一个源的文档。这个限制体现在： Cookie、...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Network/CrossDomain/"}],["meta",{"property":"og:title","content":"跨域"}],["meta",{"property":"og:description","content":"同源策略的概念和具体限制 同源策略：限制 从一个源加载的文档或脚本 如何与 来自另一个源的资源 进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。（来自MDN官方的解释） 具体解释： 源包括三个部分：协议、域名、端口。如果有任何一个部分不同，则源不同，那就是跨域了。 限制：这个源的文档没有权利去操作另一个源的文档。这个限制体现在： Cookie、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-10T09:37:58.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"Network"}],["meta",{"property":"article:published_time","content":"2022-06-01T15:28:16.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-10T09:37:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跨域\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-01T15:28:16.000Z\\",\\"dateModified\\":\\"2024-05-10T09:37:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"同源策略的概念和具体限制","slug":"同源策略的概念和具体限制","link":"#同源策略的概念和具体限制","children":[]},{"level":2,"title":"前后端如何通信","slug":"前后端如何通信","link":"#前后端如何通信","children":[{"level":3,"title":"如何创建Ajax","slug":"如何创建ajax","link":"#如何创建ajax","children":[]},{"level":3,"title":"发送 get 请求","slug":"发送-get-请求","link":"#发送-get-请求","children":[]},{"level":3,"title":"发送 post 请求","slug":"发送-post-请求","link":"#发送-post-请求","children":[]},{"level":3,"title":"onreadystatechange","slug":"onreadystatechange","link":"#onreadystatechange","children":[]},{"level":3,"title":"事件的触发条件","slug":"事件的触发条件","link":"#事件的触发条件","children":[]}]},{"level":2,"title":"如何解决跨域","slug":"如何解决跨域","link":"#如何解决跨域","children":[{"level":3,"title":"被调用方（即服务端）解决","slug":"被调用方-即服务端-解决","link":"#被调用方-即服务端-解决","children":[]},{"level":3,"title":"调用方（即客户端）解决","slug":"调用方-即客户端-解决","link":"#调用方-即客户端-解决","children":[]},{"level":3,"title":"补充后端解决跨域问题","slug":"补充后端解决跨域问题","link":"#补充后端解决跨域问题","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1714290599000,"updatedTime":1715333878000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":2}]},"readingTime":{"minutes":8.17,"words":2450},"filePathRelative":"zh/网络/跨域.md","localizedDate":"2022年6月1日","excerpt":"<h2>同源策略的概念和具体限制</h2>\\n<p>同源策略：限制 <strong>从一个源加载的文档或脚本</strong> 如何与 <strong>来自另一个源的资源</strong> 进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。（来自MDN官方的解释）</p>\\n<p>具体解释：</p>\\n<ul>\\n<li><code>源</code>包括三个部分：协议、域名、端口。如果有任何一个部分不同，则<code>源</code>不同，那就是跨域了。</li>\\n<li><code>限制</code>：这个源的文档没有权利去操作另一个源的文档。这个限制体现在：\\n<ul>\\n<li><code>Cookie</code>、<code>LocalStorage</code>和<code>IndexDB</code>无法获取。</li>\\n<li>无法获取和操作<code>DOM</code>。</li>\\n<li>不能发送<code>Ajax</code>请求。我们要注意，<code>Ajax</code>只适合<code>同源</code>的通信。</li>\\n</ul>\\n</li>\\n</ul>\\n","autoDesc":true}');export{k as comp,m as data};
