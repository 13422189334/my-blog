const n=JSON.parse('{"key":"v-160f2f08","path":"/FrontEnd/Vue/Question/","title":"Vue相关面试问题","lang":"zh-CN","frontmatter":{"title":"Vue相关面试问题","comment":false,"lang":"zh-CN","date":"2022-05-16T11:21:30.000Z","permalink":"/FrontEnd/Vue/Question/","category":["Question"],"tag":["VUE"],"description":"常问问题 vue-router实现原理的histroy相关的api vue项目想要改变element-ui的组件内部的样式，默认情况下style加了scope无法修改，需怎么做 v-if 和 v-for优先级 详情 v-if和v-for是开发中经常会遇到的2个指令，那么在使用的过程中，二者如果同时存在同一个标签上，谁的优先级会更高一点呢？ 那么我们从源码的角度去看他，源码位置： compiler/codegen/index.js 在genElement方法中，我们可以看到一些if else的判断 if (el.staticRoot &amp;&amp; !el.staticProcessed) { return genStatic(el, state) } else if (el.once &amp;&amp; !el.onceProcessed) { return genOnce(el, state) } else if (el.for &amp;&amp; !el.forProcessed) { return genFor(el, state) } else if (el.if &amp;&amp; !el.ifProcessed) { return genIf(el, state) } else if (el.tag === \'template\' &amp;&amp; !el.slotTarget &amp;&amp; !state.pre) { return genChildren(el, state) || \'void 0\' } else if (el.tag === \'slot\') { return genSlot(el, state) } else { // component or element let code if (el.component) { code = genComponent(el.component, el, state) } else { let data if (!el.plain || (el.pre &amp;&amp; state.maybeComponent(el))) { data = genData(el, state) } const children = el.inlineTemplate ? null : genChildren(el, state, true) code = `_c(\'${el.tag}\'${ data ? `,${data}` : \'\' // data }${ children ? `,${children}` : \'\' // children })` } // module transforms for (let i = 0; i &lt; state.transforms.length; i++) { code = state.transforms[i](el, code) } return code } 处理for循环是处于if的上面的，所以我们由此可以判定v-for的优先级是高于v-if的。 我们经常会遇见这种情况，在v-for的时候，在数组中会有一些需要进行v-if的判断，这种情况下，我们如果先使用computed将不需要渲染的项过滤出来，那么在进行v-for的时候，循环的就只是需要渲染的项，这也是提升vue性能的一种方式。","head":[["meta",{"property":"og:url","content":"https://jin-shaohui.gitee.io/FrontEnd/Vue/Question/"}],["meta",{"property":"og:site_name","content":"繁华中自律，落魄中自愈"}],["meta",{"property":"og:title","content":"Vue相关面试问题"}],["meta",{"property":"og:description","content":"常问问题 vue-router实现原理的histroy相关的api vue项目想要改变element-ui的组件内部的样式，默认情况下style加了scope无法修改，需怎么做 v-if 和 v-for优先级 详情 v-if和v-for是开发中经常会遇到的2个指令，那么在使用的过程中，二者如果同时存在同一个标签上，谁的优先级会更高一点呢？ 那么我们从源码的角度去看他，源码位置： compiler/codegen/index.js 在genElement方法中，我们可以看到一些if else的判断 if (el.staticRoot &amp;&amp; !el.staticProcessed) { return genStatic(el, state) } else if (el.once &amp;&amp; !el.onceProcessed) { return genOnce(el, state) } else if (el.for &amp;&amp; !el.forProcessed) { return genFor(el, state) } else if (el.if &amp;&amp; !el.ifProcessed) { return genIf(el, state) } else if (el.tag === \'template\' &amp;&amp; !el.slotTarget &amp;&amp; !state.pre) { return genChildren(el, state) || \'void 0\' } else if (el.tag === \'slot\') { return genSlot(el, state) } else { // component or element let code if (el.component) { code = genComponent(el.component, el, state) } else { let data if (!el.plain || (el.pre &amp;&amp; state.maybeComponent(el))) { data = genData(el, state) } const children = el.inlineTemplate ? null : genChildren(el, state, true) code = `_c(\'${el.tag}\'${ data ? `,${data}` : \'\' // data }${ children ? `,${children}` : \'\' // children })` } // module transforms for (let i = 0; i &lt; state.transforms.length; i++) { code = state.transforms[i](el, code) } return code } 处理for循环是处于if的上面的，所以我们由此可以判定v-for的优先级是高于v-if的。 我们经常会遇见这种情况，在v-for的时候，在数组中会有一些需要进行v-if的判断，这种情况下，我们如果先使用computed将不需要渲染的项过滤出来，那么在进行v-for的时候，循环的就只是需要渲染的项，这也是提升vue性能的一种方式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-14T09:02:01.000Z"}],["meta",{"property":"article:tag","content":"VUE"}],["meta",{"property":"article:published_time","content":"2022-05-16T11:21:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-14T09:02:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue相关面试问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-16T11:21:30.000Z\\",\\"dateModified\\":\\"2023-08-14T09:02:01.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"常问问题","slug":"常问问题","link":"#常问问题","children":[{"level":3,"title":"vue-router实现原理的histroy相关的api","slug":"vue-router实现原理的histroy相关的api","link":"#vue-router实现原理的histroy相关的api","children":[]},{"level":3,"title":"vue项目想要改变element-ui的组件内部的样式，默认情况下style加了scope无法修改，需怎么做","slug":"vue项目想要改变element-ui的组件内部的样式-默认情况下style加了scope无法修改-需怎么做","link":"#vue项目想要改变element-ui的组件内部的样式-默认情况下style加了scope无法修改-需怎么做","children":[]},{"level":3,"title":"v-if 和 v-for优先级","slug":"v-if-和-v-for优先级","link":"#v-if-和-v-for优先级","children":[]},{"level":3,"title":"vue渐进式","slug":"vue渐进式","link":"#vue渐进式","children":[]},{"level":3,"title":"优雅降级和渐进增强","slug":"优雅降级和渐进增强","link":"#优雅降级和渐进增强","children":[]}]},{"level":2,"title":"实例选项","slug":"实例选项","link":"#实例选项","children":[{"level":3,"title":"extend(s)与mixins差异","slug":"extend-s-与mixins差异","link":"#extend-s-与mixins差异","children":[]},{"level":3,"title":"created与activated差异","slug":"created与activated差异","link":"#created与activated差异","children":[]},{"level":3,"title":"vue的computed跟普通的函数有什么区别吗，computed怎么实现缓存的，有看过源码吗","slug":"vue的computed跟普通的函数有什么区别吗-computed怎么实现缓存的-有看过源码吗","link":"#vue的computed跟普通的函数有什么区别吗-computed怎么实现缓存的-有看过源码吗","children":[]}]},{"level":2,"title":"webpack模块","slug":"webpack模块","link":"#webpack模块","children":[{"level":3,"title":"webpack中 bundle chunk module 有什么区别","slug":"webpack中-bundle-chunk-module-有什么区别","link":"#webpack中-bundle-chunk-module-有什么区别","children":[]},{"level":3,"title":"webpack中 plugin loader 有什么区别","slug":"webpack中-plugin-loader-有什么区别","link":"#webpack中-plugin-loader-有什么区别","children":[]}]}],"git":{"createdTime":1682567520000,"updatedTime":1692003721000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":2}]},"readingTime":{"minutes":8.29,"words":2486},"filePathRelative":"Knowledge/FrontEnd/Vue/Question.md","localizedDate":"2022年5月16日","excerpt":"<h2> 常问问题</h2>\\n<h3> vue-router实现原理的histroy相关的api</h3>\\n<h3> vue项目想要改变element-ui的组件内部的样式，默认情况下style加了scope无法修改，需怎么做</h3>\\n<h3> v-if 和 v-for优先级</h3>\\n<details class=\\"hint-container details\\"><summary>详情</summary>\\n<p><strong>v-if和v-for是开发中经常会遇到的2个指令，那么在使用的过程中，二者如果同时存在同一个标签上，谁的优先级会更高一点呢？</strong></p>\\n<p>那么我们从源码的角度去看他，源码位置： compiler/codegen/index.js</p>\\n<p>在genElement方法中，我们可以看到一些if else的判断</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code>  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>staticRoot <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>el<span class=\\"token punctuation\\">.</span>staticProcessed<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">genStatic</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>once <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>el<span class=\\"token punctuation\\">.</span>onceProcessed<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">genOnce</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>for <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>el<span class=\\"token punctuation\\">.</span>forProcessed<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">genFor</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>if <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>el<span class=\\"token punctuation\\">.</span>ifProcessed<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">genIf</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>tag <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\'template\'</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>el<span class=\\"token punctuation\\">.</span>slotTarget <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>state<span class=\\"token punctuation\\">.</span>pre<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">genChildren</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token string\\">\'void 0\'</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>tag <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\'slot\'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">genSlot</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// component or element</span>\\n    <span class=\\"token keyword\\">let</span> code\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>component<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      code <span class=\\"token operator\\">=</span> <span class=\\"token function\\">genComponent</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>component<span class=\\"token punctuation\\">,</span> el<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">let</span> data\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>el<span class=\\"token punctuation\\">.</span>plain <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>pre <span class=\\"token operator\\">&amp;&amp;</span> state<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">maybeComponent</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        data <span class=\\"token operator\\">=</span> <span class=\\"token function\\">genData</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      <span class=\\"token keyword\\">const</span> children <span class=\\"token operator\\">=</span> el<span class=\\"token punctuation\\">.</span>inlineTemplate <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">genChildren</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n      code <span class=\\"token operator\\">=</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">_c(\'</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>el<span class=\\"token punctuation\\">.</span>tag<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">\'</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>\\n        data <span class=\\"token operator\\">?</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">,</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>data<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">`</span></span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'\'</span> <span class=\\"token comment\\">// data</span>\\n      <span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>\\n        children <span class=\\"token operator\\">?</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">,</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>children<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">`</span></span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'\'</span> <span class=\\"token comment\\">// children</span>\\n      <span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">)</span><span class=\\"token template-punctuation string\\">`</span></span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// module transforms</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> state<span class=\\"token punctuation\\">.</span>transforms<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      code <span class=\\"token operator\\">=</span> state<span class=\\"token punctuation\\">.</span>transforms<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> code<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> code\\n  <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><blockquote>\\n<p>处理for循环是处于if的上面的，所以我们由此可以判定v-for的优先级是高于v-if的。</p>\\n</blockquote>\\n<p>我们经常会遇见这种情况，在v-for的时候，在数组中会有一些需要进行v-if的判断，这种情况下，我们如果先使用computed将不需要渲染的项过滤出来，那么在进行v-for的时候，循环的就只是需要渲染的项，这也是提升vue性能的一种方式。</p>\\n</details>","copyright":{"author":"JSH","license":"MIT"},"autoDesc":true}');export{n as data};
