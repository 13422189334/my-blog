import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-CJlK69oL.js";const e={},o=t(`<p><strong>闭包（Closure）</strong> 是指一个函数包含了 <strong>对其外部作用域中变量的引用</strong> ， 即使在该函数外部作用域执行完毕后，仍然可以访问这些变量。 闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。</p><h2 id="闭包定义应用场景" tabindex="-1"><a class="header-anchor" href="#闭包定义应用场景"><span>闭包定义应用场景</span></a></h2><ol><li>保护私有变量：闭包允许你创建一个包含私有数据的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代码直接访问和修改内部状态。例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>
<span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),p=[o];function c(i,l){return s(),a("div",null,p)}const k=n(e,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/Interview/JavaScript/Closure/","title":"闭包","lang":"zh-CN","frontmatter":{"title":"闭包","lang":"zh-CN","date":"2024-03-11T14:58:43.000Z","permalink":"/Interview/JavaScript/Closure/","category":["JavaScript"],"tag":["JavaScript"],"description":"闭包（Closure） 是指一个函数包含了 对其外部作用域中变量的引用 ， 即使在该函数外部作用域执行完毕后，仍然可以访问这些变量。 闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。 闭包定义应用场景 保护私有变量：闭包允许你创建一个包含私有数据的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Interview/JavaScript/Closure/"}],["meta",{"property":"og:title","content":"闭包"}],["meta",{"property":"og:description","content":"闭包（Closure） 是指一个函数包含了 对其外部作用域中变量的引用 ， 即使在该函数外部作用域执行完毕后，仍然可以访问这些变量。 闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。 闭包定义应用场景 保护私有变量：闭包允许你创建一个包含私有数据的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-11T10:00:43.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:58:43.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-11T10:00:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-11T14:58:43.000Z\\",\\"dateModified\\":\\"2024-03-11T10:00:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"闭包定义应用场景","slug":"闭包定义应用场景","link":"#闭包定义应用场景","children":[]}],"git":{"createdTime":1710151243000,"updatedTime":1710151243000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":0.7,"words":211},"filePathRelative":"zh/Interview/JavaScript/Closure.md","localizedDate":"2024年3月11日","excerpt":"<p><strong>闭包（Closure）</strong> 是指一个函数包含了 <strong>对其外部作用域中变量的引用</strong> ，\\n即使在该函数外部作用域执行完毕后，仍然可以访问这些变量。\\n闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。</p>\\n<h2>闭包定义应用场景</h2>\\n<ol>\\n<li>保护私有变量：闭包允许你创建一个包含私有数据的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代码直接访问和修改内部状态。例如：</li>\\n</ol>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">counter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>count<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> increment <span class=\\"token operator\\">=</span> <span class=\\"token function\\">counter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">increment</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 输出 1</span>\\n<span class=\\"token function\\">increment</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 输出 2</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
