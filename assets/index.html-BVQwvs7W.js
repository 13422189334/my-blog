import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-CycynBM0.js";const e={},o=t(`<h2 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述</span></a></h2><p><strong>Promise</strong> 和 <strong>async/await</strong> 是JavaScript中用于处理异步操作的两种不同的机制，它们都旨在让异步代码 <strong>更加可读</strong> 和 <strong>易于管理</strong>。</p><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>Promise</span></a></h2><p><strong>Promise</strong> 是一种 <strong>异步编程模式</strong>，它提供了一种更 <strong>结构化</strong> 的方式来处理异步操作。一个 Promise 表示一个异步操作的最终 <strong>完成</strong> 或 <strong>失败</strong>，以及它的结果值或失败原因。</p><h3 id="promise-状态" tabindex="-1"><a class="header-anchor" href="#promise-状态"><span>Promise 状态</span></a></h3><ul><li>pending（<strong>进行中</strong>）</li><li>fulfilled（<strong>已成功</strong>）</li><li>rejected（<strong>已失败</strong>）</li></ul><p>一旦 Promise 进入 <strong>fulfilled</strong> 或 <strong>rejected</strong>状态，它就不会再改变状态。</p><p>Promise 使用 <strong>.then()</strong> 方法来注册回调函数，当异步操作成功时执行 <strong>then()</strong> 方法的第一个回调函数，当异步操作失败时执行第二个回调函数。</p><p>Promise 链允许你按顺序执行一系列的异步操作，<strong>每个操作都返回一个 Promise</strong>，这样可以更好地控制异步代码的流程。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await"><span>async/await</span></a></h2><p><strong>async/await</strong> 是基于 Promise 的<strong>语法糖</strong>，它提供了一种更像 <strong>同步代码</strong> 的方式来 <strong>处理异步操作</strong>。</p><ol><li>async 函数返回一个 Promise，</li><li>await 关键字用于暂停函数的执行，等待一个 Promise 的解决(这样可以在代码中像编写同步代码一样使用异步操作)。</li></ol><blockquote><p>async 函数的执行会在遇到第一个 await 表达式时暂停，然后等待该表达式的 Promise 解决。之后，async 函数会继续执行，直到遇到下一个 await 表达式或函数结束。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getDataAndLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">getDataAndLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Promise 是一种 <strong>更底层的异步处理机制</strong>，适用于处理 <strong>单个异步操作</strong>，而 async/await 是基于 Promise 的更高级、更易读的语法糖，适用于编写更具可读性的异步代码。 选择使用哪种方式取决于你的项目需求和个人偏好，但在现代 JavaScript 中，<strong>async/await</strong> 成为了处理异步操作的首选方式，因为它更容易理解和维护。</p>`,17),p=[o];function c(i,r){return s(),a("div",null,p)}const k=n(e,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/Interview/JavaScript/Promise/","title":"Promise, Async Await","lang":"zh-CN","frontmatter":{"title":"Promise, Async Await","lang":"zh-CN","date":"2024-03-12T16:38:12.000Z","permalink":"/Interview/JavaScript/Promise/","category":["JavaScript"],"tag":["JavaScript"],"description":"简述 Promise 和 async/await 是JavaScript中用于处理异步操作的两种不同的机制，它们都旨在让异步代码 更加可读 和 易于管理。 Promise Promise 是一种 异步编程模式，它提供了一种更 结构化 的方式来处理异步操作。一个 Promise 表示一个异步操作的最终 完成 或 失败，以及它的结果值或失败原因。 Prom...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Interview/JavaScript/Promise/"}],["meta",{"property":"og:title","content":"Promise, Async Await"}],["meta",{"property":"og:description","content":"简述 Promise 和 async/await 是JavaScript中用于处理异步操作的两种不同的机制，它们都旨在让异步代码 更加可读 和 易于管理。 Promise Promise 是一种 异步编程模式，它提供了一种更 结构化 的方式来处理异步操作。一个 Promise 表示一个异步操作的最终 完成 或 失败，以及它的结果值或失败原因。 Prom..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-15T09:58:26.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-12T16:38:12.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-15T09:58:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise, Async Await\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-12T16:38:12.000Z\\",\\"dateModified\\":\\"2024-03-15T09:58:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"简述","slug":"简述","link":"#简述","children":[]},{"level":2,"title":"Promise","slug":"promise","link":"#promise","children":[{"level":3,"title":"Promise 状态","slug":"promise-状态","link":"#promise-状态","children":[]}]},{"level":2,"title":"async/await","slug":"async-await","link":"#async-await","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1710496706000,"updatedTime":1710496706000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":1.87,"words":560},"filePathRelative":"zh/Interview/JavaScript/2-异步/2.2-微任务/Promise.md","localizedDate":"2024年3月12日","excerpt":"<h2>简述</h2>\\n<p><strong>Promise</strong> 和 <strong>async/await</strong> 是JavaScript中用于处理异步操作的两种不同的机制，它们都旨在让异步代码 <strong>更加可读</strong> 和 <strong>易于管理</strong>。</p>\\n<h2>Promise</h2>\\n<p><strong>Promise</strong> 是一种 <strong>异步编程模式</strong>，它提供了一种更 <strong>结构化</strong> 的方式来处理异步操作。一个 Promise 表示一个异步操作的最终 <strong>完成</strong> 或 <strong>失败</strong>，以及它的结果值或失败原因。</p>","autoDesc":true}');export{k as comp,d as data};
