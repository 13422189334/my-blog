const e=JSON.parse('{"key":"v-2c569a3a","path":"/DesignPattern/Observer/","title":"观察者模式","lang":"zh-CN","frontmatter":{"title":"观察者模式","lang":"zh-CN","date":"2022-05-16T11:21:30.000Z","permalink":"/DesignPattern/Observer/","category":["设计模式"],"tag":["设计模式"],"description":"观察者模式 我们学习vue的时候，经常会遇到消息通信，但大部分组件不是父子关系，就是兄弟关系。 那如果两个没有任何关系的组件，既要进行消息通信，要保证通信不丢失，那么这时候 观察者模式（发布-订阅模式） 就很好用了。 发布-订阅 发布：数据推送方，如：组件A想获取组件B数据，组件B抛出组件A需要的数据 订阅：提出诉求方，如：组件A想获取组件B数据，抛出了个接收数据的\'getData\'方法 代码编写 首先我们要定义一个观察者（数据处理中心），用来存储事件和回调函数信息。","head":[["meta",{"property":"og:url","content":"https://jin-shaohui.gitee.io/DesignPattern/Observer/"}],["meta",{"property":"og:site_name","content":"繁华中自律，落魄中自愈"}],["meta",{"property":"og:title","content":"观察者模式"}],["meta",{"property":"og:description","content":"观察者模式 我们学习vue的时候，经常会遇到消息通信，但大部分组件不是父子关系，就是兄弟关系。 那如果两个没有任何关系的组件，既要进行消息通信，要保证通信不丢失，那么这时候 观察者模式（发布-订阅模式） 就很好用了。 发布-订阅 发布：数据推送方，如：组件A想获取组件B数据，组件B抛出组件A需要的数据 订阅：提出诉求方，如：组件A想获取组件B数据，抛出了个接收数据的\'getData\'方法 代码编写 首先我们要定义一个观察者（数据处理中心），用来存储事件和回调函数信息。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-14T09:02:01.000Z"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2022-05-16T11:21:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-14T09:02:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"观察者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-16T11:21:30.000Z\\",\\"dateModified\\":\\"2023-08-14T09:02:01.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"发布-订阅","slug":"发布-订阅","link":"#发布-订阅","children":[]},{"level":2,"title":"代码编写","slug":"代码编写","link":"#代码编写","children":[]},{"level":2,"title":"实际应用","slug":"实际应用","link":"#实际应用","children":[]}],"git":{"createdTime":1682567520000,"updatedTime":1692003721000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":2}]},"readingTime":{"minutes":2.68,"words":804},"filePathRelative":"DesignPattern/Observer.md","localizedDate":"2022年5月16日","excerpt":"<h1> 观察者模式</h1>\\n<p>我们学习vue的时候，经常会遇到消息通信，但大部分组件不是父子关系，就是兄弟关系。\\n那如果两个没有任何关系的组件，既要进行消息通信，要保证通信不丢失，那么这时候 <strong>观察者模式（发布-订阅模式）</strong> 就很好用了。</p>\\n<h2> 发布-订阅</h2>\\n<blockquote>\\n<p>发布：数据推送方，如：组件A想获取组件B数据，组件B抛出组件A需要的数据</p>\\n<p>订阅：提出诉求方，如：组件A想获取组件B数据，抛出了个接收数据的\'getData\'方法</p>\\n</blockquote>\\n<h2> 代码编写</h2>\\n<ul>\\n<li>首先我们要定义一个观察者（数据处理中心），用来存储事件和回调函数信息。</li>\\n</ul>","copyright":{"author":"JSH","license":"MIT"},"autoDesc":true}');export{e as data};
