import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-CJlK69oL.js";const p={},o=t(`<p>我们都知道， <code>Ajax</code> 请求是不能跨域<a href="%5B%E8%B7%A8%E5%9F%9F%E5%8F%AF%E9%98%85%E8%AF%BB%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%5D(/Network/CrossDomain/)">^跨域</a>的，无论是 <code>静态页面</code> 、 <code>动态网页</code> 、 <code>web服务</code>等，只要是跨域请求，一律都不允许通过浏览器跨域的<code>检测</code>和<code>阻拦</code>。</p><p>但是可以发现，web页面上调用 <code>js</code> 是不受跨域的影响，同时拥有 <code>src属性</code> 的标签也具有相同的能力，比如 &lt;<strong>script</strong>&gt;、&lt;<strong>img</strong>&gt;、&lt;<strong>iframe</strong>&gt;</p><p>于是如果想通过 <code>纯web端跨域</code> 访问数据就可以这样：在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理。</p><p>恰巧有一种叫做 <code>JSON</code> 的纯字符数据格式可以简洁的描述复杂数据，<strong>更巧的是JSON还被js原生支持</strong>，所以在客户端几乎可以随心所欲的处理这种格式的数据。</p><p>这样子解决方案就呼之欲出了，web客户端通过与调用脚本一样的方式，来调用跨域服务器上动态生成的js格式文件，显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装进去。</p><p>客户端在对js文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了。</p><p>为了便于客户端使用数据，逐渐形成了一种 <code>非正式传输协议</code> ，人们把它称作 <code>JSONP</code>，该协议的一个要点就是允许用户传递一个<code>callback</code>参数给服务端， 然后服务端返回数据时会将这个callback参数作为<code>函数名</code>来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  global<span class="token punctuation">.</span><span class="token function-variable function">jsonp</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接收接口所需的所有参数及callback的函数名</span>
    <span class="token keyword">let</span> paramList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        paramList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 随机callback函数名称</span>
    <span class="token keyword">let</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> callbackFunctionName <span class="token operator">=</span> <span class="token string">&#39;jsonp_&#39;</span> <span class="token operator">+</span> random
    paramList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">callback=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>callbackFunctionName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> urlStr <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">+</span> paramList<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 定义全局函数，为后续拿到js文件调用准备</span>
    global<span class="token punctuation">[</span>callbackFunctionName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 生成element</span>
    <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>
    script<span class="token punctuation">.</span>src <span class="token operator">=</span> urlStr
    <span class="token comment">// 放入body, 立即调用全局函数 callbackFunctionName</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
    <span class="token comment">// js拿到后，移除文件</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),e=[o];function c(i,l){return s(),a("div",null,e)}const d=n(p,[["render",c],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/FrontEnd/JavaScript/Jsonp/","title":"Jsonp","lang":"zh-CN","frontmatter":{"title":"Jsonp","lang":"zh-CN","date":"2023-02-23T16:54:02.000Z","permalink":"/FrontEnd/JavaScript/Jsonp/","icon":"jsonp","category":["JavaScript"],"tag":["JavaScript"],"description":"我们都知道， Ajax 请求是不能跨域^跨域的，无论是 静态页面 、 动态网页 、 web服务等，只要是跨域请求，一律都不允许通过浏览器跨域的检测和阻拦。 但是可以发现，web页面上调用 js 是不受跨域的影响，同时拥有 src属性 的标签也具有相同的能力，比如 <script>、<img>、<iframe> 于是如果想通过 纯web端跨域 访问数据就...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/FrontEnd/JavaScript/Jsonp/"}],["meta",{"property":"og:title","content":"Jsonp"}],["meta",{"property":"og:description","content":"我们都知道， Ajax 请求是不能跨域^跨域的，无论是 静态页面 、 动态网页 、 web服务等，只要是跨域请求，一律都不允许通过浏览器跨域的检测和阻拦。 但是可以发现，web页面上调用 js 是不受跨域的影响，同时拥有 src属性 的标签也具有相同的能力，比如 <script>、<img>、<iframe> 于是如果想通过 纯web端跨域 访问数据就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-11T10:00:43.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2023-02-23T16:54:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-11T10:00:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jsonp\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-23T16:54:02.000Z\\",\\"dateModified\\":\\"2024-03-11T10:00:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1710151243000,"updatedTime":1710151243000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":2.05,"words":616},"filePathRelative":"zh/Knowledge/FrontEnd/JavaScript/Jsonp.md","localizedDate":"2023年2月23日","excerpt":"<p>我们都知道， <code>Ajax</code> 请求是不能跨域<a href=\\"%5B%E8%B7%A8%E5%9F%9F%E5%8F%AF%E9%98%85%E8%AF%BB%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%5D(/Network/CrossDomain/)\\">^跨域</a>的，无论是 <code>静态页面</code> 、 <code>动态网页</code> 、  <code>web服务</code>等，只要是跨域请求，一律都不允许通过浏览器跨域的<code>检测</code>和<code>阻拦</code>。</p>\\n<p>但是可以发现，web页面上调用 <code>js</code> 是不受跨域的影响，同时拥有 <code>src属性</code> 的标签也具有相同的能力，比如 &lt;<strong>script</strong>&gt;、&lt;<strong>img</strong>&gt;、&lt;<strong>iframe</strong>&gt;</p>","autoDesc":true}');export{d as comp,k as data};
