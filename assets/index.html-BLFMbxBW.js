import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,d as e,b as n}from"./app-CgATGGZr.js";const o={},p=n('<p>白话解释：所谓跨域其实就是浏览器对我们发送的接口请求进行拦截，不允许我们直接访问，浏览器就像是一个中间桥梁，它说让我们通过就让通过，它说不让通过那就通过不了。</p><h2 id="发生跨域的三个必要条件" tabindex="-1"><a class="header-anchor" href="#发生跨域的三个必要条件"><span>发生跨域的三个必要条件：</span></a></h2><p>一般情况，我们己的项目地址和接口地址的域名不同时，如：https://localhost:9527，也许会不假思索的就能回答出：<strong>不同协议，不同域名，不同端口</strong>。没有问题，但并不准确，我更倾向于把这三个叫 <strong>跨域的三要素</strong> ，那什么是跨域形成的必要条件呢？</p><blockquote><p>浏览器限制： 即浏览器对跨域行为进行检测和阻止</p><p>触发跨域的三要素之一： 即协议、域名和端口三个条件满足其一</p><p>发起的是xhr请求： 即发起的是 XMLHttpRequest 类型的请求。</p></blockquote>',4),l=n(`<h2 id="如何解决跨域" tabindex="-1"><a class="header-anchor" href="#如何解决跨域"><span>如何解决跨域？</span></a></h2><p>为了更好的理解这个知识点，我们先回顾一下一个普通项目的交互关系。客户端有各种各样的请求发送给中间服务器Apache / Nginx，中间服务器在接收到请求之后，判断如果是静态资源（img，js插件等）则直接返回客户端，如果是交互资源（例如访问@RequestMapping里的方法）则转发至应用服务器上。</p><p>现在大部分公司项目采用前后端分离的开发模式，使得客户端和服务器端通常都在不同服务器上，这种模式解决跨域主要有两种思路：</p><ul><li>第一种就是<strong>被调用方（即后端）解决</strong>：调用方在浏览器直接将请求发送至被调用方，被调用方处理完成后，在请求响应中添加基于http协议关于跨域请求的一些规定，就是在http响应头中添加Access-Control-Allow-Origin等一些配置允许跨域访问。这种解决方法是基于解决跨域的思路，修改的是被调用方的HTTP服务器，我们在浏览器中能看到有调用方的url，也有被调用方的url。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 允许跨域的域名，设置*表示允许除带Cookies信息的所有域名</span>
response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第二种就是<strong>调用方（即前端）解决</strong>：这是基于隐藏跨域的解决办法。调用方通过一个代理服务器（Nginx）转发请求到被调用方的中间服务器，浏览器看到请求都是来自同一个域，就不会报跨域问题了。这种方式是基于隐藏跨域的思路，修改的是调用方的HTTP服务器(调用方的请求url是经过调用方的 Nginx 做反向代理转换转换的，目的就是为了和‘’被调用方”的域名端口一致)，在浏览器中也就只能看到调用方的url。</li></ul><h3 id="补充后端解决跨域问题" tabindex="-1"><a class="header-anchor" href="#补充后端解决跨域问题"><span>补充后端解决跨域问题</span></a></h3><p>如果是在被调用方解决跨域问题，被调用方解决支持跨域办法如下：</p><ol><li>在应用服务器端实现</li><li>在Ngnix上配置</li><li>在Apache上配置</li><li>Spring框架解决</li></ol><p>虽然有4种方案，但是这4种方案的本质都是一样的，最终的目的是在响应头增加字段。浏览器在执行跨域请求时，如果遇到是简单请求，则先执行后判断；如果是非简单请求，则先使用OPTION向服务器发起一个预检请求 <strong>preflight request</strong> ，从而获知服务器是否允许该跨域访问，如果允许，就在此发起带真实数据的请求，否则不发起。这就实现了对被调用方的数据安全保护，也是跨域问题设计所在的目的之一。</p><blockquote><p>在介绍简单/非简单请求前，我们要了解什么是 Content-Type，<strong>Content-Type是指http/https发送信息至服务器时的内容编码类型</strong></p></blockquote><p><strong>【常见简单请求】</strong></p><ol><li><p>GET</p></li><li><p>HEAD</p></li><li><p>POST</p></li></ol><p>且它的Content-Type为text/plain（普通文本类型）或multipart/form-data（多媒体数据/表单数据）或application/x-www-form-urlencoded中的一种</p><p><strong>【常见非简单请求】</strong></p><ol><li>PUT</li><li>DELETE</li><li>OPTIONS</li><li>发送Json格式的Ajax请求[常为post]</li><li>带自定义Header信息的Ajax请求</li><li>CONNECT</li><li>TRACE</li><li>PATCH</li></ol><p>当浏览器发现发起的是一个跨域的请求时，它会向请求头里增加一个Origin字段，当请求被响应时，浏览器会检查响应头里有没有设置允许跨域的信息，如果没有，它就会报错。同理，如果给请求增加头信息，那么加入的信息也会作为跨域检查的信息。</p><ul><li><strong>举个例子</strong></li></ul><p>我们在本地搭起来了一个后端项目，端口号为8080；同时搭建了一个前端项目，端口号为9527。那这个时候我们直接调用后端接口的时候，前后端分离的原因导致我们需要跨域请求 。因此，在应用服务器端的响应头需要添加允许跨域的设置，即如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>
  <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

  <span class="token class-name">HttpServletResponse</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>

  <span class="token comment">// 允许跨域的域名，设置*表示允许除带Cookies信息的所有域名</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:9527&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">// 允许跨域的方法，可设置*表示所有。GET/POST/OPTIONS等</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">// 假如给post请求头设置了contentType字段，则需要添加以下信息</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置预检命令的缓存时效。单位是&quot;秒&quot;</span>
  <span class="token comment">// 如果没有失效，则不会再次发起OPTION预检请求</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Max-Age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3600&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 还可以有其他配置...</span>
  chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让过滤器放行该请求</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候，我们就可以在响应头Response Headers里观察到 <strong>Access-Control-Allow-Origin</strong> 和 <strong>Access-Control-Allow-Methods</strong> 信息，这代表跨域就被成功允许了。</p><ul><li><strong>还有一种特殊情况</strong></li></ul><p>带有Cookie的请求还需要注意一下两点才能实现跨域：</p><ol><li>Access-Control-Allow-Origin的值不能为 <strong>&#39;*&#39;</strong> 而是必须是精准匹配，因此需要添上具体的域名</li><li>打开允许Cookie的设置，即Access-Control-Allow-Credentials: true</li></ol><p>但是这又带出了另一个问题，就是只能支持一个域名的跨域，怎么办？其实该变量可以通过调用方的请求头信息获取，解决办法如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequset</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
<span class="token class-name">String</span> origin <span class="token operator">=</span>  req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token char">&#39;Origin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 带cookie的时候origin必须是全匹配，不能使用 *</span>
  res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Orign&quot;</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于需要增加请求头信息解决方案与此类似</p><p><strong>调用方解决跨域：反向代理</strong></p><p>当被调用方无法帮助解决处理跨域问题时，调用方也可以自己解决处理。其实现的办法就是利用反向代理</p><blockquote><p><strong>正向代理：</strong> 利用代理客户端去请求服务器，从而隐藏了真实的客户端，服务器并不知道客户端是谁，这种代理方式称作正向代理，其代理的对象是客户端</p><p><strong>反向代理:</strong> 反向代理隐藏了真正的服务端。举个例子，我们只知道敲下www.baidu.com时就能访问百度搜索页面，然而背后成千上万的服务器到底是哪一台正在为我们服务我们并不知道，这种隐藏了服务器端的代理方式称作反向代理，其代理的是服务器端。软件层面上常用Ngnix来做反向代理服务器，他的性能很好，用来做负载均衡。</p></blockquote><p>为了实现反向代理，我们需要在 Ngnix中配置一个代理域名，或者称为一个网址demo.com，就像百度成千上万的服务器使用用一个代理网址www.baidu.com一样。ngnix的配置信息如下</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">server_name:</span> demo.com</span><span class="token punctuation">;</span> <span class="token comment"># 请求域名是demo.com，端口是80的，都会被nginx做代理</span>
  <span class="token comment"># http://demo.com/api/test 就会跳转到http://localhost:8080/test/</span>
  <span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080/test/</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment"># http://demo.com/test 就会跳转到http://localhost:8080/</span>
  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>跨域是由浏览器安全限制造成的，解决跨域的办法有三种，一是 <strong>Jsonp</strong> 绕过浏览器安全检测策略，二是从被调用方配置支持跨域的请求头信息，三是从调用方利用反向代理，在 Ngnix 或 Apache 中配置代理域名隐藏跨域。</p>`,34);function i(c,r){return a(),t("div",null,[p,e(" more "),l])}const k=s(o,[["render",i],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/FrontEnd/Network/CrossDomain/","title":"跨域","lang":"zh-CN","frontmatter":{"title":"跨域","lang":"zh-CN","date":"2022-06-01T15:28:16.000Z","permalink":"/FrontEnd/Network/CrossDomain/","category":["Network"],"tag":["跨域"],"description":"白话解释：所谓跨域其实就是浏览器对我们发送的接口请求进行拦截，不允许我们直接访问，浏览器就像是一个中间桥梁，它说让我们通过就让通过，它说不让通过那就通过不了。 发生跨域的三个必要条件： 一般情况，我们己的项目地址和接口地址的域名不同时，如：https://localhost:9527，也许会不假思索的就能回答出：不同协议，不同域名，不同端口。没有问题，...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/FrontEnd/Network/CrossDomain/"}],["meta",{"property":"og:title","content":"跨域"}],["meta",{"property":"og:description","content":"白话解释：所谓跨域其实就是浏览器对我们发送的接口请求进行拦截，不允许我们直接访问，浏览器就像是一个中间桥梁，它说让我们通过就让通过，它说不让通过那就通过不了。 发生跨域的三个必要条件： 一般情况，我们己的项目地址和接口地址的域名不同时，如：https://localhost:9527，也许会不假思索的就能回答出：不同协议，不同域名，不同端口。没有问题，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-11T10:00:43.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"跨域"}],["meta",{"property":"article:published_time","content":"2022-06-01T15:28:16.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-11T10:00:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跨域\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-01T15:28:16.000Z\\",\\"dateModified\\":\\"2024-03-11T10:00:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"发生跨域的三个必要条件：","slug":"发生跨域的三个必要条件","link":"#发生跨域的三个必要条件","children":[]},{"level":2,"title":"如何解决跨域？","slug":"如何解决跨域","link":"#如何解决跨域","children":[{"level":3,"title":"补充后端解决跨域问题","slug":"补充后端解决跨域问题","link":"#补充后端解决跨域问题","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1710151243000,"updatedTime":1710151243000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":7.26,"words":2179},"filePathRelative":"zh/Knowledge/FrontEnd/Network/CrossDomain.md","localizedDate":"2022年6月1日","excerpt":"<p>白话解释：所谓跨域其实就是浏览器对我们发送的接口请求进行拦截，不允许我们直接访问，浏览器就像是一个中间桥梁，它说让我们通过就让通过，它说不让通过那就通过不了。</p>\\n<h2>发生跨域的三个必要条件：</h2>\\n<p>一般情况，我们己的项目地址和接口地址的域名不同时，如：https://localhost:9527，也许会不假思索的就能回答出：<strong>不同协议，不同域名，不同端口</strong>。没有问题，但并不准确，我更倾向于把这三个叫 <strong>跨域的三要素</strong> ，那什么是跨域形成的必要条件呢？</p>\\n<blockquote>\\n<p>浏览器限制： 即浏览器对跨域行为进行检测和阻止</p>\\n<p>触发跨域的三要素之一： 即协议、域名和端口三个条件满足其一</p>\\n<p>发起的是xhr请求： 即发起的是 XMLHttpRequest 类型的请求。</p>\\n</blockquote>\\n","autoDesc":true}');export{k as comp,m as data};
