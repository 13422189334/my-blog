const e=JSON.parse('{"key":"v-46d4f31c","path":"/Algorithm/Dichotomy/","title":"二分查找理论","lang":"zh-CN","frontmatter":{"title":"二分查找理论","date":"2022-06-06T16:36:20.000Z","permalink":"/Algorithm/Dichotomy/","category":["算法"],"tag":["很菜的算法"],"description":"二分查找理论 二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用 顺序存储结构 ，而且表中元素按关键字有序排列。 首先，假设表中元素是按升序排列，将表中间位置记录的 关键字 与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置 记录 将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的 记录 ，使查找成功，或直到子表不存在为止，此时查找不成功。 二分查找是我们降低算法复杂度的主要手段之一，只要我们可以题目中存在：","head":[["meta",{"property":"og:url","content":"https://jin-shaohui.gitee.io/Algorithm/Dichotomy/"}],["meta",{"property":"og:site_name","content":"繁华中自律，落魄中自愈"}],["meta",{"property":"og:title","content":"二分查找理论"}],["meta",{"property":"og:description","content":"二分查找理论 二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用 顺序存储结构 ，而且表中元素按关键字有序排列。 首先，假设表中元素是按升序排列，将表中间位置记录的 关键字 与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置 记录 将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的 记录 ，使查找成功，或直到子表不存在为止，此时查找不成功。 二分查找是我们降低算法复杂度的主要手段之一，只要我们可以题目中存在："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-14T09:02:01.000Z"}],["meta",{"property":"article:tag","content":"很菜的算法"}],["meta",{"property":"article:published_time","content":"2022-06-06T16:36:20.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-14T09:02:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分查找理论\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-06T16:36:20.000Z\\",\\"dateModified\\":\\"2023-08-14T09:02:01.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"二分查找理论","slug":"二分查找理论","link":"#二分查找理论","children":[]},{"level":2,"title":"方式","slug":"方式","link":"#方式","children":[]},{"level":2,"title":"分类","slug":"分类","link":"#分类","children":[{"level":3,"title":"第一类 - 数据无重复查找数据","slug":"第一类-数据无重复查找数据","link":"#第一类-数据无重复查找数据","children":[]},{"level":3,"title":"第二类 - 数据有重复查找小于该数的最后一个数字的位置","slug":"第二类-数据有重复查找小于该数的最后一个数字的位置","link":"#第二类-数据有重复查找小于该数的最后一个数字的位置","children":[]},{"level":3,"title":"第三类 - 数据有重复查找该数字第一次出现的位置","slug":"第三类-数据有重复查找该数字第一次出现的位置","link":"#第三类-数据有重复查找该数字第一次出现的位置","children":[]},{"level":3,"title":"第四类 - 数据有重复查找该数字最后一次出现的位置","slug":"第四类-数据有重复查找该数字最后一次出现的位置","link":"#第四类-数据有重复查找该数字最后一次出现的位置","children":[]},{"level":3,"title":"第五类 - 数据有重复查找第一个大于该数的数字的位置","slug":"第五类-数据有重复查找第一个大于该数的数字的位置","link":"#第五类-数据有重复查找第一个大于该数的数字的位置","children":[]}]},{"level":2,"title":"实战","slug":"实战","link":"#实战","children":[{"level":3,"title":"搜索插入位置","slug":"搜索插入位置","link":"#搜索插入位置","children":[{"level":4,"title":"思路与算法","slug":"思路与算法","link":"#思路与算法","children":[]}]},{"level":3,"title":"有序数组中的单一元素","slug":"有序数组中的单一元素","link":"#有序数组中的单一元素","children":[{"level":4,"title":"思路与算法","slug":"思路与算法-1","link":"#思路与算法-1","children":[]}]}]}],"git":{"createdTime":1682567520000,"updatedTime":1692003721000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":2}]},"readingTime":{"minutes":7.36,"words":2207},"filePathRelative":"Algorithm/Dichotomy.md","localizedDate":"2022年6月6日","excerpt":"<h2> 二分查找理论</h2>\\n<p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用 顺序存储结构 ，而且表中元素按关键字有序排列。</p>\\n<p>首先，假设表中元素是按升序排列，将表中间位置记录的 关键字 与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置 记录  将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的 记录 ，使查找成功，或直到子表不存在为止，此时查找不成功。</p>\\n<p>二分查找是我们降低算法复杂度的主要手段之一，只要我们可以题目中存在：</p>","copyright":{"author":"JSH","license":"MIT"},"autoDesc":true}');export{e as data};
