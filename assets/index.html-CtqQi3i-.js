import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-C4rPT73i.js";const e={},p=t(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https:/duyi-static.oss-cn-beijing.aliyuncs.com/files/novel.txt&#39;</span>
    <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token comment">// const text = await resp.text()</span>
    <span class="token keyword">const</span> reader <span class="token operator">=</span> resp<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> remainChunk <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> resultText <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> done<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> text <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
      resultText <span class="token operator">+=</span> text
      <span class="token comment">// document.writeln(text)</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultText<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/Tips/JavaScript/002/","title":"大文本数据加载","lang":"zh-CN","frontmatter":{"title":"大文本数据加载","lang":"zh-CN","date":"2024-05-18T17:15:31.000Z","permalink":"/Tips/JavaScript/002/","category":["JavaScript"],"tag":["Tips"],"head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Tips/JavaScript/002/"}],["meta",{"property":"og:title","content":"大文本数据加载"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T11:09:54.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"Tips"}],["meta",{"property":"article:published_time","content":"2024-05-18T17:15:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T11:09:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大文本数据加载\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-18T17:15:31.000Z\\",\\"dateModified\\":\\"2024-05-18T11:09:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1716030594000,"updatedTime":1716030594000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":0.26,"words":79},"filePathRelative":"zh/小技巧/JavaScript/002.大文本数据加载.md","localizedDate":"2024年5月18日","excerpt":"<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code> <span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">load</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> url <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'https:/duyi-static.oss-cn-beijing.aliyuncs.com/files/novel.txt'</span>\\n    <span class=\\"token keyword\\">const</span> resp <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">fetch</span><span class=\\"token punctuation\\">(</span>url<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// const text = await resp.text()</span>\\n    <span class=\\"token keyword\\">const</span> reader <span class=\\"token operator\\">=</span> resp<span class=\\"token punctuation\\">.</span>body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getReader</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">const</span> decoder <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">TextDecoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">let</span> remainChunk <span class=\\"token operator\\">=</span>  <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Uint8Array</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">let</span> resultText <span class=\\"token operator\\">=</span> <span class=\\"token string\\">''</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> done<span class=\\"token punctuation\\">,</span> value <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> reader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>done<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">break</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">const</span> text <span class=\\"token operator\\">=</span> decoder<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decode</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n      resultText <span class=\\"token operator\\">+=</span> text\\n      <span class=\\"token comment\\">// document.writeln(text)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>resultText<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}`);export{k as comp,d as data};
