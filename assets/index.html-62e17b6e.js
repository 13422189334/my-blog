const n=JSON.parse('{"key":"v-dec2fce2","path":"/Interview/JavaScript/Closure/","title":"闭包","lang":"zh-CN","frontmatter":{"title":"闭包","lang":"zh-CN","date":"2024-03-11T14:58:43.000Z","permalink":"/Interview/JavaScript/Closure/","category":["JavaScript"],"tag":["JavaScript"],"description":"闭包（Closure） 是指一个函数包含了 对其外部作用域中变量的引用 ， 即使在该函数外部作用域执行完毕后，仍然可以访问这些变量。 闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。 闭包定义应用场景 保护私有变量：闭包允许你创建一个包含私有数据的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代码直接访问和修改内部状态。例如： function counter() { let count = 0; return function () { count++; console.log(count); }; } const increment = counter(); increment(); // 输出 1 increment(); // 输出 2","head":[["meta",{"property":"og:url","content":"https://jin-shaohui.gitee.io/Interview/JavaScript/Closure/"}],["meta",{"property":"og:site_name","content":"繁华中自律，落魄中自愈"}],["meta",{"property":"og:title","content":"闭包"}],["meta",{"property":"og:description","content":"闭包（Closure） 是指一个函数包含了 对其外部作用域中变量的引用 ， 即使在该函数外部作用域执行完毕后，仍然可以访问这些变量。 闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。 闭包定义应用场景 保护私有变量：闭包允许你创建一个包含私有数据的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代码直接访问和修改内部状态。例如： function counter() { let count = 0; return function () { count++; console.log(count); }; } const increment = counter(); increment(); // 输出 1 increment(); // 输出 2"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-11T07:24:09.000Z"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:58:43.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-11T07:24:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-11T14:58:43.000Z\\",\\"dateModified\\":\\"2024-03-11T07:24:09.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"闭包定义应用场景","slug":"闭包定义应用场景","link":"#闭包定义应用场景","children":[]}],"git":{"createdTime":1710141849000,"updatedTime":1710141849000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":0.7,"words":211},"filePathRelative":"Interview/JavaScript/Closure.md","localizedDate":"2024年3月11日","excerpt":"<p><strong>闭包（Closure）</strong> 是指一个函数包含了 <strong>对其外部作用域中变量的引用</strong> ，\\n即使在该函数外部作用域执行完毕后，仍然可以访问这些变量。\\n闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。</p>\\n<h2> 闭包定义应用场景</h2>\\n<ol>\\n<li>保护私有变量：闭包允许你创建一个包含私有数据的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代码直接访问和修改内部状态。例如：</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">counter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>count<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> increment <span class=\\"token operator\\">=</span> <span class=\\"token function\\">counter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">increment</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 输出 1</span>\\n<span class=\\"token function\\">increment</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 输出 2</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"JSH","license":"MIT"},"autoDesc":true}');export{n as data};
