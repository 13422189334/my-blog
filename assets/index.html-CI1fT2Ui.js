import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as s,c as a,a as t,f as i,w as l,e as o,b as g}from"./app-GjHxp28g.js";const c={},p=g('<h2 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述</span></a></h2><p>异步流程是指在程序中执行的一系列操作<strong>不是</strong>按照顺序<strong>同步执行</strong>的，而是按照<strong>事件发生</strong>或者<strong>异步操作的完成情况</strong>来执行的一种流程。</p><p>这种方式允许程序在等待某些操作完成时继续执行其他任务，而不会被阻塞。</p><h2 id="异步流程的一般步骤" tabindex="-1"><a class="header-anchor" href="#异步流程的一般步骤"><span>异步流程的一般步骤</span></a></h2><ol><li><strong>发起异步操作</strong>：首先，发起一个异步操作，比如<strong>发起一个网络请求</strong>、<strong>读取一个文件</strong>、<strong>等待用户输入</strong>等。这些操作可能需要一段时间来完成。</li><li><strong>注册回调函数</strong>：一旦异步操作被触发，通常会<strong>注册一个回调函数</strong>，这个函数将在操作完成后被调用。回调函数是异步流程中的关键，因为它定义了在异步操作完成时要执行的逻辑。</li><li><strong>继续执行</strong>：在注册回调函数后，程序通常会<strong>继续执行其他任务</strong>，而<strong>不会等待</strong>异步操作完成。这样可以提高程序的响应性，不会让程序在等待I/O操作时被阻塞。</li><li><strong>异步操作完成</strong>：当异步操作完成，注册的回调函数将被调用，执行与异步操作相关的逻辑。</li></ol><h2 id="常见的异步编程模式和技术" tabindex="-1"><a class="header-anchor" href="#常见的异步编程模式和技术"><span>常见的异步编程模式和技术</span></a></h2><ol><li><strong>回调函数</strong>：最基本的异步编程模式是使用回调函数。将一个函数作为参数传递给异步操作，当操作完成时，回调函数将被执行。</li><li><strong>Promise</strong>：Promise是一种更高级的<strong>异步编程模式</strong>，它提供了一种更结构化的方式来处理异步操作。通过Promise，可以更容易地处理异步操作的成功和失败情况。</li><li><strong>async/await</strong>：async/await是JavaScript中的<strong>异步编程语法糖</strong>，它<strong>基于Promise</strong>构建，使异步代码看起来更像同步代码，提高了可读性。</li><li><strong>事件驱动编程</strong>：在事件驱动编程中，将事件处理程序注册到特定事件上，当事件发生时，处理程序将被调用，如 onclick。</li><li><strong>生成器函数</strong>：生成器函数允许在迭代中暂停和恢复执行，这对于处理异步操作的结果很有用。</li></ol><p>异步流程允许程序在执行过程中<strong>非阻塞</strong>地处理多个任务，提高了程序的效率和用户体验。然而，它也需要更复杂的控制流程，因此需要小心<strong>处理回调地狱<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><strong>和</strong>异步错误处理</strong>等问题。</p><hr class="footnotes-sep">',9),h={class:"footnotes"},d={class:"footnotes-list"},m={id:"footnote1",class:"footnote-item"},f=t("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function u(_,v){const n=r("RouteLink");return s(),a("div",null,[p,t("section",h,[t("ol",d,[t("li",m,[t("p",null,[i(n,{to:"/Interview/JavaScript/CallbackHell/"},{default:l(()=>[o("回调地狱")]),_:1}),o(),f])])])])])}const b=e(c,[["render",u],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/Interview/JavaScript/Async/","title":"异步","lang":"zh-CN","frontmatter":{"title":"异步","lang":"zh-CN","date":"2024-03-12T11:45:33.000Z","permalink":"/Interview/JavaScript/Async/","category":["JavaScript"],"tag":["JavaScript"],"description":"简述 异步流程是指在程序中执行的一系列操作不是按照顺序同步执行的，而是按照事件发生或者异步操作的完成情况来执行的一种流程。 这种方式允许程序在等待某些操作完成时继续执行其他任务，而不会被阻塞。 异步流程的一般步骤 发起异步操作：首先，发起一个异步操作，比如发起一个网络请求、读取一个文件、等待用户输入等。这些操作可能需要一段时间来完成。 注册回调函数：一...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Interview/JavaScript/Async/"}],["meta",{"property":"og:title","content":"异步"}],["meta",{"property":"og:description","content":"简述 异步流程是指在程序中执行的一系列操作不是按照顺序同步执行的，而是按照事件发生或者异步操作的完成情况来执行的一种流程。 这种方式允许程序在等待某些操作完成时继续执行其他任务，而不会被阻塞。 异步流程的一般步骤 发起异步操作：首先，发起一个异步操作，比如发起一个网络请求、读取一个文件、等待用户输入等。这些操作可能需要一段时间来完成。 注册回调函数：一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-15T09:58:26.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-12T11:45:33.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-15T09:58:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异步\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-12T11:45:33.000Z\\",\\"dateModified\\":\\"2024-03-15T09:58:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"简述","slug":"简述","link":"#简述","children":[]},{"level":2,"title":"异步流程的一般步骤","slug":"异步流程的一般步骤","link":"#异步流程的一般步骤","children":[]},{"level":2,"title":"常见的异步编程模式和技术","slug":"常见的异步编程模式和技术","link":"#常见的异步编程模式和技术","children":[]}],"git":{"createdTime":1710496706000,"updatedTime":1710496706000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":2.27,"words":682},"filePathRelative":"zh/Interview/JavaScript/2-异步/2.1-异步/Async.md","localizedDate":"2024年3月12日","excerpt":"<h2>简述</h2>\\n<p>异步流程是指在程序中执行的一系列操作<strong>不是</strong>按照顺序<strong>同步执行</strong>的，而是按照<strong>事件发生</strong>或者<strong>异步操作的完成情况</strong>来执行的一种流程。</p>\\n<p>这种方式允许程序在等待某些操作完成时继续执行其他任务，而不会被阻塞。</p>\\n<h2>异步流程的一般步骤</h2>\\n<ol>\\n<li><strong>发起异步操作</strong>：首先，发起一个异步操作，比如<strong>发起一个网络请求</strong>、<strong>读取一个文件</strong>、<strong>等待用户输入</strong>等。这些操作可能需要一段时间来完成。</li>\\n<li><strong>注册回调函数</strong>：一旦异步操作被触发，通常会<strong>注册一个回调函数</strong>，这个函数将在操作完成后被调用。回调函数是异步流程中的关键，因为它定义了在异步操作完成时要执行的逻辑。</li>\\n<li><strong>继续执行</strong>：在注册回调函数后，程序通常会<strong>继续执行其他任务</strong>，而<strong>不会等待</strong>异步操作完成。这样可以提高程序的响应性，不会让程序在等待I/O操作时被阻塞。</li>\\n<li><strong>异步操作完成</strong>：当异步操作完成，注册的回调函数将被调用，执行与异步操作相关的逻辑。</li>\\n</ol>","autoDesc":true}');export{b as comp,k as data};
