const e=JSON.parse('{"key":"v-bab80564","path":"/Algorithm/PriorityTraversal/","title":"优先遍历算法","lang":"zh-CN","frontmatter":{"title":"优先遍历算法","date":"2022-06-24T14:38:26.000Z","permalink":"/Algorithm/PriorityTraversal/","category":["算法"],"tag":["很菜的算法"],"description":"深度优先遍历 深度优先遍历（Depth First Search，简称 DFS）就是找准一条路不停深入的搜索方法， 当发现这条路走不通的时候就会回退到上一个探索的节点，如果上一个节点存在没有探索的分支，便继续探索若没有则继续回退。 深度优先遍历就有点像二叉树中的前序遍历、中序遍历和后序遍历。 它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。 深度优先遍历的关键就在于如何找到已经探索过节点的上一个节点，也就是如何回溯。","head":[["meta",{"property":"og:url","content":"https://jin-shaohui.gitee.io/Algorithm/PriorityTraversal/"}],["meta",{"property":"og:site_name","content":"繁华中自律，落魄中自愈"}],["meta",{"property":"og:title","content":"优先遍历算法"}],["meta",{"property":"og:description","content":"深度优先遍历 深度优先遍历（Depth First Search，简称 DFS）就是找准一条路不停深入的搜索方法， 当发现这条路走不通的时候就会回退到上一个探索的节点，如果上一个节点存在没有探索的分支，便继续探索若没有则继续回退。 深度优先遍历就有点像二叉树中的前序遍历、中序遍历和后序遍历。 它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。 深度优先遍历的关键就在于如何找到已经探索过节点的上一个节点，也就是如何回溯。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-15T05:46:14.000Z"}],["meta",{"property":"article:tag","content":"很菜的算法"}],["meta",{"property":"article:published_time","content":"2022-06-24T14:38:26.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-15T05:46:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"优先遍历算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-24T14:38:26.000Z\\",\\"dateModified\\":\\"2023-08-15T05:46:14.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"深度优先遍历","slug":"深度优先遍历","link":"#深度优先遍历","children":[{"level":3,"title":"递归实现","slug":"递归实现","link":"#递归实现","children":[]},{"level":3,"title":"迭代实现","slug":"迭代实现","link":"#迭代实现","children":[]}]},{"level":2,"title":"广度优先遍历","slug":"广度优先遍历","link":"#广度优先遍历","children":[]}],"git":{"createdTime":1682567520000,"updatedTime":1692078374000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":3}]},"readingTime":{"minutes":2.57,"words":771},"filePathRelative":"Algorithm/PriorityTraversal.md","localizedDate":"2022年6月24日","excerpt":"<h2> 深度优先遍历</h2>\\n<p>深度优先遍历（Depth First Search，简称 DFS）就是找准一条路不停深入的搜索方法，\\n当发现这条路走不通的时候就会回退到上一个探索的节点，如果上一个节点存在没有探索的分支，便继续探索若没有则继续回退。\\n深度优先遍历就有点像二叉树中的前序遍历、中序遍历和后序遍历。</p>\\n<p>它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。</p>\\n<p>深度优先遍历的关键就在于如何找到已经探索过节点的上一个节点，也就是如何回溯。</p>\\n","copyright":{"author":"JSH","license":"MIT"},"autoDesc":true}');export{e as data};
