import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-CFXHzI0x.js";const p={},e=t(`<h2 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述</span></a></h2><p><strong>闭包（Closure）</strong> 是指一个函数包含了 <strong>对其外部作用域中变量的引用</strong>， 即使在<strong>该函数外部作用域</strong>执行完毕后，仍然可以访问这些变量。 闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。</p><h2 id="闭包定义应用场景" tabindex="-1"><a class="header-anchor" href="#闭包定义应用场景"><span>闭包定义应用场景</span></a></h2><p>闭包是一种强大的编程工具，它可以用于许多不同的应用场景，包括数据封装、模块化编程、回调函数等。</p><h3 id="保护私有变量" tabindex="-1"><a class="header-anchor" href="#保护私有变量"><span>保护私有变量</span></a></h3><p>闭包允许你创建一个包含<strong>私有数据</strong>的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代码<strong>直接访问</strong>和 <strong>修改内部状态</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现数据封装" tabindex="-1"><a class="header-anchor" href="#实现数据封装"><span>实现数据封装</span></a></h3><p>闭包可以用于创建类似于面向对象编程中的对象实例。你可以定义一个包含<strong>内部状态</strong>和<strong>方法</strong> 的函数，然后通过闭包来访问和操作这些数据。这种方式被称为&quot;<strong>模块模式</strong>&quot;：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getAge</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setBirthYear</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">year</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> nowYear <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&lt;=</span> nowYear<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        age <span class="token operator">=</span> nowYear <span class="token operator">-</span> year<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&quot;石怜安&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;石怜安&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span>
person<span class="token punctuation">.</span><span class="token function">setBirthYear</span><span class="token punctuation">(</span><span class="token number">1997</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 27</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现回调函数" tabindex="-1"><a class="header-anchor" href="#实现回调函数"><span>实现回调函数</span></a></h3><p>闭包经常用于创建回调函数，将函数作为参数传递给其他函数。这些回调函数可以<strong>访问外部函数的局部变量</strong>，以便在异步操作完成后执行特定的逻辑。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 模拟异步请求</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">&quot;url:xxxx&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;接收报文为 &quot;</span> <span class="token operator">+</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现函数工厂" tabindex="-1"><a class="header-anchor" href="#实现函数工厂"><span>实现函数工厂</span></a></h3><p>闭包可以用于创建<strong>定制的函数</strong>，这些函数可以生成特定的行为或配置。这在某些库和框架中很常见。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPowerFunction</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">**</span> number<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token function">createPowerFunction</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cubic <span class="token operator">=</span> <span class="token function">createPowerFunction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 25</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cubic</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 125</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/Interview/JavaScript/Closure/","title":"闭包","lang":"zh-CN","frontmatter":{"title":"闭包","lang":"zh-CN","date":"2024-03-11T14:58:43.000Z","permalink":"/Interview/JavaScript/Closure/","category":["JavaScript"],"tag":["JavaScript"],"description":"简述 闭包（Closure） 是指一个函数包含了 对其外部作用域中变量的引用， 即使在该函数外部作用域执行完毕后，仍然可以访问这些变量。 闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。 闭包定义应用场景 闭包是一种强大的编程工具，它可以用于许多不同的应用场景，包括数据封装、模块化编程、回调函数等。 保护私有变量 闭包...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Interview/JavaScript/Closure/"}],["meta",{"property":"og:title","content":"闭包"}],["meta",{"property":"og:description","content":"简述 闭包（Closure） 是指一个函数包含了 对其外部作用域中变量的引用， 即使在该函数外部作用域执行完毕后，仍然可以访问这些变量。 闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。 闭包定义应用场景 闭包是一种强大的编程工具，它可以用于许多不同的应用场景，包括数据封装、模块化编程、回调函数等。 保护私有变量 闭包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-15T09:58:26.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:58:43.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-15T09:58:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-11T14:58:43.000Z\\",\\"dateModified\\":\\"2024-03-15T09:58:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"简述","slug":"简述","link":"#简述","children":[]},{"level":2,"title":"闭包定义应用场景","slug":"闭包定义应用场景","link":"#闭包定义应用场景","children":[{"level":3,"title":"保护私有变量","slug":"保护私有变量","link":"#保护私有变量","children":[]},{"level":3,"title":"实现数据封装","slug":"实现数据封装","link":"#实现数据封装","children":[]},{"level":3,"title":"实现回调函数","slug":"实现回调函数","link":"#实现回调函数","children":[]},{"level":3,"title":"实现函数工厂","slug":"实现函数工厂","link":"#实现函数工厂","children":[]}]}],"git":{"createdTime":1710496706000,"updatedTime":1710496706000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":1.87,"words":561},"filePathRelative":"zh/Interview/JavaScript/1-基础/Closure.md","localizedDate":"2024年3月11日","excerpt":"<h2>简述</h2>\\n<p><strong>闭包（Closure）</strong> 是指一个函数包含了 <strong>对其外部作用域中变量的引用</strong>，\\n即使在<strong>该函数外部作用域</strong>执行完毕后，仍然可以访问这些变量。\\n闭包允许你在一个函数内部访问另一个函数的变量，这在许多编程语言中是一种强大的特性。</p>\\n<h2>闭包定义应用场景</h2>\\n<p>闭包是一种强大的编程工具，它可以用于许多不同的应用场景，包括数据封装、模块化编程、回调函数等。</p>\\n<h3>保护私有变量</h3>\\n<p>闭包允许你创建一个包含<strong>私有数据</strong>的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代码<strong>直接访问</strong>和\\n<strong>修改内部状态</strong>。</p>","autoDesc":true}');export{k as comp,d as data};
