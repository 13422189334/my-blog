const e=JSON.parse('{"key":"v-3ccda781","path":"/FrontEnd/Performance/Skill/","title":"性能优化方法","lang":"zh-CN","frontmatter":{"title":"性能优化方法","lang":"zh-CN","date":"2022-06-01T15:08:30.000Z","permalink":"/FrontEnd/Performance/Skill/","icon":"enum","category":["性能优化"],"tag":["不咋滴的性能优化"],"description":"Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分， 使得我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM。 但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题， 所以我们仍然需要去关注 Vue 项目性能方面的优化，使项目具有更高效的性能、更好的用户体验。本文内容分为以下三部分组成： Vue 代码层面的优化 webpack 配置层面的优化 基础的 Web 技术层面的优化 Vue 代码层面的优化","head":[["meta",{"property":"og:url","content":"https://jin-shaohui.gitee.io/FrontEnd/Performance/Skill/"}],["meta",{"property":"og:site_name","content":"繁华中自律，落魄中自愈"}],["meta",{"property":"og:title","content":"性能优化方法"}],["meta",{"property":"og:description","content":"Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分， 使得我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM。 但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题， 所以我们仍然需要去关注 Vue 项目性能方面的优化，使项目具有更高效的性能、更好的用户体验。本文内容分为以下三部分组成： Vue 代码层面的优化 webpack 配置层面的优化 基础的 Web 技术层面的优化 Vue 代码层面的优化"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-14T09:02:01.000Z"}],["meta",{"property":"article:tag","content":"不咋滴的性能优化"}],["meta",{"property":"article:published_time","content":"2022-06-01T15:08:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-14T09:02:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"性能优化方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-01T15:08:30.000Z\\",\\"dateModified\\":\\"2023-08-14T09:02:01.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Vue 代码层面的优化","slug":"vue-代码层面的优化","link":"#vue-代码层面的优化","children":[{"level":3,"title":"v-if 和 v-show 区分使用场景","slug":"v-if-和-v-show-区分使用场景","link":"#v-if-和-v-show-区分使用场景","children":[]},{"level":3,"title":"computed 和 watch区分使用场景","slug":"computed-和-watch区分使用场景","link":"#computed-和-watch区分使用场景","children":[]},{"level":3,"title":"v-for 遍历必须为 item 添加 key，且避免同时使用 v-if","slug":"v-for-遍历必须为-item-添加-key-且避免同时使用-v-if","link":"#v-for-遍历必须为-item-添加-key-且避免同时使用-v-if","children":[]},{"level":3,"title":"长列表性能优化","slug":"长列表性能优化","link":"#长列表性能优化","children":[]},{"level":3,"title":"事件的销毁","slug":"事件的销毁","link":"#事件的销毁","children":[]},{"level":3,"title":"图片资源懒加载","slug":"图片资源懒加载","link":"#图片资源懒加载","children":[]},{"level":3,"title":"路由懒加载","slug":"路由懒加载","link":"#路由懒加载","children":[]},{"level":3,"title":"第三方插件的按需引入","slug":"第三方插件的按需引入","link":"#第三方插件的按需引入","children":[]},{"level":3,"title":"优化无限列表性能","slug":"优化无限列表性能","link":"#优化无限列表性能","children":[]},{"level":3,"title":"服务端渲染 SSR or 预渲染","slug":"服务端渲染-ssr-or-预渲染","link":"#服务端渲染-ssr-or-预渲染","children":[]}]}],"git":{"createdTime":1687857948000,"updatedTime":1692003721000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":2}]},"readingTime":{"minutes":8.52,"words":2557},"filePathRelative":"Knowledge/FrontEnd/Performance/Skill.md","localizedDate":"2022年6月1日","excerpt":"<p>Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分，</p>\\n<p>使得我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM。</p>\\n<p>但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题，</p>\\n<p>所以我们仍然需要去关注 Vue 项目性能方面的优化，使项目具有更高效的性能、更好的用户体验。本文内容分为以下三部分组成：</p>\\n<ul>\\n<li>Vue 代码层面的优化</li>\\n<li>webpack 配置层面的优化</li>\\n<li>基础的 Web 技术层面的优化</li>\\n</ul>\\n<h2> Vue 代码层面的优化</h2>","copyright":{"author":"JSH","license":"MIT"},"autoDesc":true}');export{e as data};
